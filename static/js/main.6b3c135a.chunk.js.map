{"version":3,"sources":["Creature.js","Simulation.js","Calculator.js","serviceWorker.js","index.js"],"names":["Creature","props","handleUpdateStats","newHp","newAc","newBonus","newDamage","isUpdating","newCreature","hp","parseInt","state","creature","ac","bonus","damage","setState","onUpdateStats","number","isPlayer","bind","this","type","placeholder","onChange","event","target","value","React","Component","Simulation","simulateOutcome","outcomes","i","outcome","runEncounter","encounter","monsterMethod","playerMethod","cancel","playersDowned","players","forEach","player","push","attempts","array","length","j","Math","floor","random","temp","method","shuffleArray","sort","a","b","isPlayersTurn","newEncounter","JSON","parse","stringify","monsters","sortCreatures","sides","dice","damageDone","split","damageDie","rollDie","creatures","enemies","enemyIndex","findIndex","enemy","damageDealt","rollDamage","createEncounterOrder","turn","undefined","find","monster","attackEnemies","turns","ceil","onClick","showResults","Array","apply","map","_","rounds","percentage","parseFloat","toFixed","Calculator","newPlayers","newMonsters","handleUpdatePlayerMethod","handleUpdateMonsterMethod","handleUpdateAttempts","updating","isLoading","addPlayer","addMonster","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b3c135a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Creature extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {creature: {}}\n        this.handleUpdateStats = this.handleUpdateStats.bind(this);\n    }\n\n    handleUpdateStats = (newHp, newAc, newBonus, newDamage) => {\n        this.props.isUpdating(true);\n        let newCreature = {\n            hp: newHp ? parseInt(newHp) : this.state.creature.hp,\n            ac: newAc ? parseInt(newAc) : this.state.creature.ac,\n            bonus: newBonus ? parseInt(newBonus) : this.state.creature.bonus,\n            damage: newDamage ? newDamage : this.state.creature.damage\n        }\n        this.setState({creature: newCreature}, () => {this.props.isUpdating(false);})\n        this.props.onUpdateStats(newCreature, this.props.number, this.props.isPlayer)\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>{this.props.isPlayer ? 'Player' : 'Monster'} {this.props.number + 1}</h4>\n                <div>\n                    HP:&nbsp; \n                    <input \n                        type=\"number\" \n                        placeholder={18}\n                        onChange={event => this.handleUpdateStats(event.target.value, false, false, false)}\n                    ></input>\n                </div>\n                <div>\n                    AC:&nbsp; \n                    <input \n                        type=\"number\" \n                        placeholder={16}\n                        onChange={event => this.handleUpdateStats(false, event.target.value, false, false)}\n                    ></input>\n                </div>\n                <div>\n                    Attack Bonus:&nbsp; \n                    <input \n                        type=\"number\" \n                        placeholder={3}\n                        onChange={event => this.handleUpdateStats(false, false, event.target.value, false)}\n                    ></input>\n                </div>\n                <div>\n                    Damage per hit:&nbsp; \n                    <input \n                        type=\"text\" \n                        placeholder={\"1d8 3d6\"}\n                        onChange={event => this.handleUpdateStats(false, false, false, event.target.value)}\n                    ></input>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default class Simulation extends React.Component {\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array\n    }\n\n    sortCreatures(method, array) {\n        if(method === 0) { // randomized\n            return this.shuffleArray(array);\n        } else if (method === 1) { // weakest first \n            return array.sort((a, b) => {return (b.ac * b.hp)-(a.ac * a.hp)});\n        } else if (method === 2) { // strongest first\n            return array.sort((a, b) => {return (a.ac * a.hp)-(b.ac * b.hp)});\n        }\n    }\n\n    createEncounterOrder(method, encounter, isPlayersTurn) {\n        let newEncounter = JSON.parse(JSON.stringify(encounter))\n        if (isPlayersTurn) {\n            newEncounter.monsters = this.sortCreatures(method, newEncounter.monsters)\n        } else {\n            newEncounter.players = this.sortCreatures(method, newEncounter.players)\n        }\n        return newEncounter\n    }\n\n    rollDie(sides) {\n        return Math.floor(Math.random() * Math.floor(sides))+1;\n    }\n\n    rollDamage(dice) {\n        let damageDone = 0;\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            for (let i = 0; i < dice[0]; i++) {\n                damageDone += this.rollDie(dice[1]);\n                if(dice.length === 3) {damageDone += dice[2];}\n            }\n        })\n        return damageDone\n    }\n\n    attackEnemies(creatures, enemies) {\n        creatures.forEach(creature => {\n            if (creature.hp <= 0) {return}\n            let enemyIndex = enemies.findIndex(enemy => enemy.hp > 0);\n            if(enemyIndex === -1) {return}\n            let attackRoll = this.rollDie(20) + creature.bonus;\n            if(attackRoll >= enemies[enemyIndex].ac) {\n                let damageDealt = this.rollDamage(creature.damage);\n                enemies[enemyIndex].hp = enemies[enemyIndex].hp - damageDealt;\n            }\n        })\n        return enemies\n    }\n\n    runEncounter(monsterMethod, playerMethod, cancel) {\n        // we need to deep copy the object here with JSON.parse(JSON.Stringify(obj)). \n        // Object.assign() is shallow copy, and sub-surface-level parameters will \n        // still point to the original object's parameters\n        let encounter = JSON.parse(JSON.stringify(this.props.encounter));\n        encounter = this.createEncounterOrder(monsterMethod, encounter, false);\n        encounter = this.createEncounterOrder(playerMethod, encounter, true)\n        let turn = 1;\n\n        while(!cancel\n            && turn < 400\n            && encounter.monsters.find(monster => monster.hp > 0) !== undefined\n            && encounter.players.find(player => player.hp > 0) !== undefined\n        ) {\n            if (turn % 2) {\n                // monsters turn\n                if(monsterMethod === 0) {\n                    encounter = this.createEncounterOrder(monsterMethod, encounter, false)\n                }\n                encounter.players = this.attackEnemies(encounter.monsters, encounter.players);\n            } else {\n                // players turn\n                if(playerMethod === 0) {\n                    encounter = this.createEncounterOrder(playerMethod, encounter, true)\n                }\n                encounter.monsters = this.attackEnemies(encounter.players, encounter.monsters);\n            }\n            turn++\n        }\n        encounter.turns = Math.ceil(turn / 2.0)\n        return encounter\n    }\n\n\n    simulateOutcome = () => {\n        let outcomes = []\n        for (let i = 0; i < this.props.encounter.attempts; i++) {\n            let outcome = this.runEncounter(\n                            parseInt(this.props.encounter.monsterMethod),\n                            parseInt(this.props.encounter.playerMethod),\n                            this.props.encounter.cancel\n                        )\n\n            outcome.playersDowned = 0;\n            outcome.players.forEach(player => {\n                if (player.hp <= 0) {\n                    outcome.playersDowned++\n                }\n            })\n\n            outcomes.push(outcome)\n        }\n        this.setState({outcomes: outcomes})\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.simulateOutcome}>Run simulation</button>\n                {this.showResults}\n                {this.state\n                    ? Array.apply(0, Array(this.props.encounter.players.length+1)).map((_, i) => {\n                        let rounds = 0;\n                        this.state.outcomes.forEach(outcome => {\n                            if (outcome.playersDowned === i) { rounds++; }\n                        })\n                        let percentage = (parseFloat(rounds / this.state.outcomes.length) * 100).toFixed(1)\n                        return <div>{i} players die in {rounds} rounds ({percentage}%)</div>\n                    })\n                    : <div></div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Creature from './Creature'\nimport Simulation from './Simulation'\nimport './Calculator.css'\n\nexport default class Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [{}],\n            monsters: [{}],\n            isUpdating: false,\n            playerMethod: 0,\n            monsterMethod: 0,\n            attempts: 1\n        }\n        this.addPlayer = this.addPlayer.bind(this)\n        this.addMonster = this.addMonster.bind(this)\n    }\n\n    addPlayer() {\n        let newPlayers = [...this.state.players, []]\n        this.setState({players: newPlayers})\n    }\n\n    addMonster() {\n        let newMonsters = [...this.state.monsters, []]\n        this.setState({monsters: newMonsters})\n    }\n\n    handleUpdateStats = (creature, i, isPlayer) => {\n        if(isPlayer) {\n            let newPlayers = [...this.state.players];\n            newPlayers[i] = creature;\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = [...this.state.monsters];\n            newMonsters[i] = creature;\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleUpdatePlayerMethod = (event) => {\n        this.setState({playerMethod: event.target.value})\n    }\n    handleUpdateMonsterMethod = (event) => {\n        this.setState({monsterMethod: event.target.value})\n    }\n\n    handleUpdateAttempts = (event) => {\n        this.setState({attempts: event.target.value})\n    }\n\n    updating = (isLoading) => {\n        this.setState({isUpdating: isLoading})\n    }\n\n    render() {\n        return(\n            <div className=\"dark-mode\">\n                <h1>D&amp;D 5e Combat Simulator</h1>\n                <div className=\"grid-container\">\n                    <div>\n                        <button onClick={this.addPlayer}>Add Player</button>\n                        {this.state.players.map((_, i) => {\n                            return (\n                                <Creature \n                                    number={i} \n                                    onUpdateStats={this.handleUpdateStats} \n                                    isPlayer={true}\n                                    isUpdating={this.updating}\n                                />\n                            )\n                        })}\n                    </div>\n                    <div>\n                        <button onClick={this.addMonster}>Add Monster</button>\n                        {this.state.monsters.map((_, i) => {\n                            return (\n                                <Creature\n                                    number={i}\n                                    onUpdateStats={this.handleUpdateStats}\n                                    isPlayer={false}\n                                    isUpdating={this.updating}\n                                />\n                            )\n                        })}\n                    </div>\n                </div>\n                <div>Pick the combat tactics for the players</div>\n                <select value={this.state.playerMethod} onChange={this.handleUpdatePlayerMethod}>\n                    <option value={0}>Random order</option>\n                    <option value={1}>Weakest first</option>\n                    <option value={2}>Strongest first</option>\n                </select>\n                <div>Pick the combat tactics for the monsters</div>\n                <select value={this.state.monsterMethod} onChange={this.handleUpdateMonsterMethod}>\n                    <option value={0}>Random order</option>\n                    <option value={1}>Weakest first</option>\n                    <option value={2}>Strongest first</option>\n                </select>\n                <div>\n                    <div>Number of simulations</div>\n                    <input type=\"number\" placeholder={1} onChange={this.handleUpdateAttempts}></input>\n                </div>\n                <Simulation encounter={this.state}/>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
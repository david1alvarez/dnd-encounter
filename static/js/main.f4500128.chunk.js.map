{"version":3,"sources":["Creature.js","Simulation.js","Calculator.js","serviceWorker.js","index.js"],"names":["Creature","props","handleUpdateStats","newName","newHp","newAc","newBonus","newDamage","newInitiative","setState","valid","validateStats","newCreature","name","stats","hp","ac","bonus","damage","initiative","onUpdateStats","number","isPlayer","handleRemoveCreature","onRemoveCreature","handleCopyCreature","onCopyCreature","bind","state","dice","retVal","split","forEach","damageDie","isNaN","length","this","parseInt","validateDice","className","html","disabled","onChange","event","target","value","onClick","Tooltip","title","type","placeholder","React","Component","Simulation","simulateOutcome","outcomes","i","survivors","runEncounter","playersAlive","creature","push","encounter","players","attempts","array","j","Math","floor","random","temp","method","shuffleArray","sort","a","b","calculateMaxDamage","console","error","rollDie","JSON","parse","stringify","initiativeOrder","player","initiativeRoll","attackMethod","playerMethod","monsters","monster","monsterMethod","rollInitiative","playerTargetingOrder","monsterTargetingOrder","attackingOrder","some","attackEnemies","enemies","index","sortCreatures","enemy","find","item","rollAttack","rollDamage","sortingPlayers","newEncounter","sides","maxDamage","damageDone","showResults","Array","apply","map","_","encounters","outcome","percentage","parseFloat","toFixed","key","Calculator","setTestData","newPlayers","newMonsters","handleUpdatePlayerMethod","handleUpdateMonsterMethod","handleUpdateAttempts","splice","isDevEnvironment","window","location","href","includes","addPlayer","addMonster","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f4500128.chunk.js","sourcesContent":["import React from 'react'\nimport './Creature.css'\nimport ContentEditable from 'react-contenteditable'\nimport { Tooltip } from '@material-ui/core'\n\nexport default class Creature extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleUpdateStats = this.handleUpdateStats.bind(this);\n        this.state = { valid: { name: true, hp: true, ac: true, bonus: true, damage: true, initiative: true } }\n    }\n\n    // return true if dice are valid\n    // this is not working properly\n    validateDice(dice) {\n        let retVal = true\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            if (\n                isNaN(dice[0])\n                || (dice.length > 1 && isNaN(dice[1]))\n                || (dice.length > 2 && isNaN(dice[2]))\n            ) {\n                retVal = false\n            }\n        })\n        return retVal\n    }\n\n    // return true for valid stats and false for invalid stats\n    validateStats(name, hp, ac, bonus, damage, initiative) {\n        return {\n            name: name === false ? this.state.valid.name : typeof name === \"string\",\n            hp: hp === false ? this.state.valid.hp : hp === \"\" || ((!isNaN(hp) && parseInt(hp) > 0)),\n            ac: ac === false ? this.state.valid.ac : !isNaN(ac),\n            bonus: bonus === false ? this.state.valid.bonus : !isNaN(bonus),\n            damage: damage === false ? this.state.valid.damage : this.validateDice(damage),\n            initiative: initiative === false ? this.state.valid.initiative : !isNaN(initiative)\n        }\n    }\n\n    // castToInt(input) {\n    //     if (input === \"\") {\n    //         return input\n    //     } else {\n    //         return parseInt(input)\n    //     }\n    // }\n\n    handleUpdateStats = (newName, newHp, newAc, newBonus, newDamage, newInitiative) => {\n        this.setState({ valid: this.validateStats(newName, newHp, newAc, newBonus, newDamage, newInitiative) })\n        let newCreature = {\n            name: newName !== false ? newName : this.props.stats.name,\n            hp: newHp !== false ? newHp : this.props.stats.hp,\n            ac: newAc !== false ? newAc : this.props.stats.ac,\n            bonus: newBonus !== false ? newBonus : this.props.stats.bonus,\n            damage: newDamage !== false ? newDamage : this.props.stats.damage,\n            initiative: newInitiative !== false ? newInitiative : this.props.stats.initiative\n        }\n        this.props.onUpdateStats(newCreature, this.props.number, this.props.isPlayer)\n    }\n\n    handleRemoveCreature = () => {\n        this.props.onRemoveCreature(this.props.number, this.props.isPlayer)\n    }\n\n    handleCopyCreature = () => {\n        this.props.onCopyCreature(this.props.number, this.props.isPlayer)\n    }\n\n    render() {\n        return (\n            <div className=\"margin\">\n\n                <div className=\"spread-right-left\">\n                    <ContentEditable\n                        className={this.state.valid.name ? \"name \" : \"error name\"}\n                        html={this.props.stats.name}\n                        disabled={false}\n                        onChange={event => this.handleUpdateStats(event.target.value, false, false, false, false, false)}\n                    />\n                    <div className=\"spread-right-left\">\n                        <button className=\"center-vertical\" onClick={this.handleRemoveCreature}>delete</button>\n                        <div>&nbsp;</div>\n                        <button className=\"center-vertical\" onClick={this.handleCopyCreature}>duplicate</button>\n                    </div>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>HP:&nbsp; </div>\n                    <Tooltip title={this.state.valid.hp ? \"\" : \"HP must be a positive number\"}>\n                        <input\n                            className={this.state.valid.hp ? \"\" : \"error\"}\n                            type=\"text\"\n                            placeholder={\"ex: 18\"}\n                            value={this.props.stats.hp}\n                            onChange={event => this.handleUpdateStats(false, event.target.value, false, false, false, false)}\n                        ></input>                        \n                    </Tooltip>\n\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>AC:&nbsp; </div>\n                    <Tooltip title={this.state.valid.ac ? \"\" : \"AC must be a number\"}>\n                        <input\n                            className={this.state.valid.ac ? \"\" : \"error\"}\n                            type=\"text\"\n                            placeholder={\"ex: 16\"}\n                            value={this.props.stats.ac}\n                            onChange={event => this.handleUpdateStats(false, false, event.target.value, false, false, false)}\n                        ></input>\n                    </Tooltip>\n\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Attack Bonus:&nbsp; </div>\n                    <Tooltip title={this.state.valid.bonus ? \"\" : \"Attack Bonus must be a number\"} >\n                        <input\n                            className={this.state.valid.bonus ? \"\" : \"error\"}\n                            type=\"text\"\n                            placeholder={\"ex: 5\"}\n                            value={this.props.stats.bonus}\n                            onChange={event => this.handleUpdateStats(false, false, false, event.target.value, false, false)}\n                        ></input>\n                    </Tooltip>\n                    \n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Damage Dice:&nbsp; </div>\n                    <Tooltip title={this.state.valid.damage ? \"\" : \"Damage Dice must be entered as (dice)d(sides)+(bonus)\"} >\n                        <input\n                            className={this.state.valid.damage ? \"\" : \"error\"}\n                            type=\"text\"\n                            placeholder={\"ex: 1d8+3 3d6\"}\n                            value={this.props.stats.damage}\n                            onChange={event => this.handleUpdateStats(false, false, false, false, event.target.value, false)}\n                        ></input>\n                    </Tooltip>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Initiative Bonus:&nbsp; </div>\n                    <Tooltip title={this.state.valid.initiative ? \"\" : \"Initiative Bonus must be a number\"}>\n                        <input\n                            className={this.state.valid.initiative ? \"\" : \"error\"}\n                            type=\"text\"\n                            placeholder={\"ex: 2\"}\n                            value={this.props.stats.initiative}\n                            onChange={event => this.handleUpdateStats(false, false, false, false, false, event.target.value)}\n                        ></input>                        \n                    </Tooltip>\n\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport './Simulation.css'\n\nexport default class Simulation extends React.Component {\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array\n    }\n\n    sortCreatures(method, array) {\n        switch(method) {\n            case 0: // random\n                return this.shuffleArray(array);\n            case 1: // weakest defense first\n                return array.sort((a, b) => {return (\n                    (a.ac * a.hp)-(b.ac * b.hp)\n                )});\n            case 2: // strongest defense first\n                return array.sort((a, b) => {return (\n                    (b.ac * b.hp)-(a.ac * a.hp)\n                )});\n            case 3: // weakest attack first\n                return array.sort((a, b) => {return (\n                    (a.bonus * this.calculateMaxDamage(a.damage))-(b.bonus * this.calculateMaxDamage(b.damage))\n                )})\n            case 4: // strongest attack first\n                return array.sort((a, b) => {return (\n                    (b.bonus * this.calculateMaxDamage(b.damage))-(a.bonus * this.calculateMaxDamage(a.damage))\n                )})\n            case 5: // weakest combined first\n                return array.sort((a, b) => {return (\n                    (a.ac * a.hp * a.bonus * this.calculateMaxDamage(a.damage))-(b.ac * b.hp * b.bonus * this.calculateMaxDamage(b.damage))\n                )})\n            case 6: // strongest combined first\n                return array.sort((a, b) => {return (\n                    (b.ac * b.hp * b.bonus * this.calculateMaxDamage(b.damage))-(a.ac * a.hp * a.bonus * this.calculateMaxDamage(a.damage))\n                )})\n            default:\n                console.error('no attack case match')\n        }\n    }\n\n    rollInitiative(creature) {\n        return this.rollDie(20) + creature.initiative\n    }\n\n    runEncounter() {\n        let encounter = JSON.parse(JSON.stringify(this.props.encounter));\n\n        let initiativeOrder = []\n        encounter.players.forEach(player => {\n            initiativeOrder.push({...player, isPlayer: true, initiativeRoll: 0, attackMethod: this.props.encounter.playerMethod})\n        })\n        encounter.monsters.forEach(monster => {\n            initiativeOrder.push({...monster,isPlayer: false, initiativeRoll: 0, attackMethod: this.props.encounter.monsterMethod})\n        })\n\n        initiativeOrder.forEach(creature => {\n            creature.initiativeRoll = this.rollInitiative(creature)\n        })\n\n        initiativeOrder.sort((a, b) => {return (b.initiativeRoll - a.initiativeRoll)})\n\n        // sort the player and monster targeting orders for non-random targeting cases\n        let playerTargetingOrder = [] // ordering of which players the monsters will attack first\n        let monsterTargetingOrder = [] // ordering of which monsters the players will attack first\n        if (this.props.encounter.monsterMethod !== 0) {\n            playerTargetingOrder = this.attackingOrder(this.props.encounter.monsterMethod, false, initiativeOrder)\n        }\n        if (this.props.encounter.playerMethod !== 0) {\n            monsterTargetingOrder = this.attackingOrder(this.props.encounter.playerMethod, true, initiativeOrder)\n        }\n\n        // cycle through the initiativeOrder array until one side dies\n        let i = 0\n        while (initiativeOrder.some(creature => { return (creature.isPlayer && (creature.hp > 0)) })\n            && initiativeOrder.some(creature => { return (!creature.isPlayer && (creature.hp > 0)) })\n        ) {\n            if (i >= initiativeOrder.length) {\n                i = 0\n            }\n            // if the targeting order is random, create the targetingOrders\n            if (initiativeOrder[i].isPlayer) {\n                if (this.props.encounter.playerMethod === 0) {\n                    monsterTargetingOrder = this.attackingOrder(this.props.encounter.playerMethod, initiativeOrder[i].isPlayer, initiativeOrder)\n                }\n                initiativeOrder = this.attackEnemies(initiativeOrder[i], monsterTargetingOrder, initiativeOrder)\n            } else if (!initiativeOrder[i].isPlayer) {\n                if (this.props.encounter.monsterMethod === 0) {\n                    playerTargetingOrder = this.attackingOrder(this.props.encounter.monsterMethod, initiativeOrder[i].isPlayer, initiativeOrder)\n                }\n                initiativeOrder = this.attackEnemies(initiativeOrder[i], playerTargetingOrder, initiativeOrder)\n            }\n            i++\n        }\n\n        return initiativeOrder\n    }\n\n    attackingOrder(method, isPlayer, initiativeOrder) {\n        let enemies = []\n        for (let i = 0; i < initiativeOrder.length; i++) {\n            if (initiativeOrder[i].isPlayer !== isPlayer) {\n                enemies.push({index: i, ...initiativeOrder[i]})\n            }\n        }\n        enemies = this.sortCreatures(method, enemies)\n        return enemies\n    }\n\n    attackEnemies(creature, enemies, initiativeOrder) {\n        // find first alive creature in that targeting order\n        let enemy = enemies.find(item => initiativeOrder[item.index].hp > 0)\n        if (!enemy) { // no living enemies remain\n            return initiativeOrder\n        }\n\n        if ((this.rollAttack(creature.bonus) >= initiativeOrder[enemy.index].ac)) {\n            initiativeOrder[enemy.index].hp -= this.rollDamage(creature.damage)\n        }\n        return initiativeOrder\n    }\n\n    createTargetingOrder(method, encounter, sortingPlayers) {\n        let newEncounter = JSON.parse(JSON.stringify(encounter))\n        if (sortingPlayers) {\n            newEncounter.players = this.sortCreatures(method, newEncounter.players)\n        } else {\n            newEncounter.monsters = this.sortCreatures(method, newEncounter.monsters)\n        }\n        return newEncounter\n    }\n\n    rollDie(sides) {\n        return Math.floor(Math.random() * Math.floor(sides))+1;\n    }\n\n    calculateMaxDamage(dice) {\n        let maxDamage = 0\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            maxDamage += (parseInt(dice[0]) * parseInt(dice[1]))\n            if (dice.length === 3) {\n                maxDamage += parseInt(dice[2])\n            }\n        })\n        return maxDamage\n    }\n\n    rollDamage(dice) {\n        let damageDone = 0;\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            for (let i = 0; i < parseInt(dice[0]); i++) {\n                damageDone += parseInt(this.rollDie(dice[1]));\n            }\n            if(dice.length === 3) {damageDone += parseInt(dice[2]);}\n        })\n        return damageDone\n    }\n\n    rollAttack(bonus) {\n        return this.rollDie(20) + bonus\n    }\n\n    simulateOutcome = () => {\n        let outcomes = []\n        for (let i = 0; i < this.props.encounter.attempts; i++) {\n\n            let survivors = this.runEncounter()\n            let playersAlive = 0;\n            survivors.forEach(creature => {\n                if (creature.isPlayer && creature.hp > 0) {\n                    playersAlive++\n                }\n            })\n\n            outcomes.push(this.props.encounter.players.length - playersAlive)\n        }\n        this.setState({outcomes: outcomes})\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.simulateOutcome}>Run simulation</button>\n                {this.showResults}\n                {this.state\n                    ? Array.apply(0, Array(this.props.encounter.players.length+1)).map((_, i) => {\n                        let encounters = 0;\n                        this.state.outcomes.forEach(outcome => {\n                            if (outcome === i) { encounters++; }\n                        })\n                        let percentage = (parseFloat(encounters / this.state.outcomes.length) * 100).toFixed(1)\n                        return <div key={i}>{i} players die in {encounters} encounters ({percentage}%)</div>\n                    })\n                    : <div></div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Creature from './Creature'\nimport Simulation from './Simulation'\nimport './Calculator.css'\n\nexport default class Calculator extends React.Component {\n    // add in names and then displays of how frequencly each player dies\n    // use monsterData.json, filter in place. 1.6mb is big and may require a loading symbol, but would be worth it.\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [{ name: 'Player 1', hp: '', ac: '', bonus: '', damage: '', initiative: '' }],\n            monsters: [{ name: 'Monster 1', hp: '', ac: '', bonus: '', damage: '', initiative: '' }],\n            playerMethod: 0,\n            monsterMethod: 0,\n            attempts: 100,\n            isDevEnvironment: window.location.href.includes('localhost:3000')\n        }\n        this.addPlayer = this.addPlayer.bind(this)\n        this.addMonster = this.addMonster.bind(this)\n    }\n\n    addPlayer() {\n        let newPlayers = [...this.state.players, { name: `Player ${this.state.players.length + 1}`, hp: '', ac: '', bonus: '', damage: '', initiative: '' }]\n        this.setState({players: newPlayers})\n    }\n\n    addMonster() {\n        let newMonsters = [...this.state.monsters, { name: `Monster ${this.state.monsters.length + 1}`, hp: '', ac: '', bonus: '', damage: '', initiative: '' }]\n        this.setState({monsters: newMonsters})\n    }\n\n    setTestData = () => {\n        let testPlayers = [\n            { name: \"Player 1\", hp: 25, ac: 14, bonus: 7, damage: \"1d6+3\", initiative: 2 },\n            { name: \"Player 2\", hp: 50, ac: 16, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { name: \"Player 3\", hp: 75, ac: 18, bonus: 5, damage: \"2d108+3\", initiative: 2 },\n            { name: \"Player 4\", hp: 100, ac: 20, bonus: 4, damage: \"2d12+3\", initiative: 2 }\n        ]\n        let testEnemies = [\n            { name: \"Monster 1\", hp: 25, ac: 14, bonus: 7, damage: \"1d6+3\", initiative: 2 },\n            { name: \"Monster 2\", hp: 50, ac: 16, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { name: \"Monster 3\", hp: 75, ac: 18, bonus: 5, damage: \"2d10+3\", initiative: 2 },\n            { name: \"Monster 4\", hp: 100, ac: 20, bonus: 4, damage: \"2d12d6+3\", initiative: 2 }\n        ]\n        this.setState({players: testPlayers, monsters: testEnemies})\n    }\n\n    handleUpdateStats = (creature, i, isPlayer) => {\n        if(isPlayer) {\n            let newPlayers = [...this.state.players].map(player => {\n                return {\n                    name: player.name,\n                    hp: parseInt(player.hp), \n                    ac: parseInt(player.ac), \n                    bonus: parseInt(player.bonus),\n                    damage: player.damage,\n                    initiative: parseInt(player.initiative)\n                }\n            });\n            \n            newPlayers[i] = creature;\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = [...this.state.monsters].map(monster => {\n                return {\n                    name: monster.name,\n                    hp: parseInt(monster.hp), \n                    ac: parseInt(monster.ac), \n                    bonus: parseInt(monster.bonus),\n                    damage: monster.damage,\n                    initiative: parseInt(monster.initiative)\n                }\n            });\n            newMonsters[i] = creature;\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleUpdatePlayerMethod = (event) => {\n        this.setState({playerMethod: parseInt(event.target.value)})\n    }\n    handleUpdateMonsterMethod = (event) => {\n        this.setState({monsterMethod: parseInt(event.target.value)})\n    }\n\n    handleUpdateAttempts = (event) => {\n        this.setState({attempts: parseInt(event.target.value)})\n    }\n\n    handleRemoveCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 1)\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 1)\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleCopyCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 0, newPlayers[i])\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 0, newMonsters[i])\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"dark-mode center\">\n                <div>\n                    <h1 className=\"center-text\">D&amp;D 5e Combat Simulator</h1>\n                    <div className=\"grid-container\">\n                        <div>\n                            {this.state.players.map((player, i) => {\n                                return (\n                                    <Creature \n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats} \n                                        isPlayer={true}\n                                        stats={{\n                                            name: player.name,\n                                            hp: player.hp, \n                                            ac: player.ac, \n                                            bonus: player.bonus, \n                                            damage: player.damage, \n                                            initiative: player.initiative\n                                        }}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                            <div className=\"center\">\n                                <button onClick={this.addPlayer}>Add Player</button>\n                            </div>\n                        </div>\n                        <div>\n                            {this.state.monsters.map((monster, i) => {\n                                return (\n                                    <Creature\n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats}\n                                        isPlayer={false}\n                                        stats={{\n                                            name: monster.name,\n                                            hp: monster.hp, \n                                            ac: monster.ac, \n                                            bonus: monster.bonus, \n                                            damage: monster.damage, \n                                            initiative: monster.initiative\n\n                                        }}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                            <div className=\"center\">\n                                <button onClick={this.addMonster}>Add Monster</button>\n                            </div>\n                            \n                        </div>\n                        \n                    </div>\n                    <div className=\"center\">\n                        <div>\n                            <br/>\n                            {this.state.isDevEnvironment ? <button onClick={this.setTestData}>Add Test Data</button> : ''}\n                           <div>Targeting tactics for the players</div>\n                            <select className=\"dropdown\" value={this.state.playerMethod} onChange={this.handleUpdatePlayerMethod}>\n                                <option value={0}>Random order</option>\n                                <option value={1}>Defense: weaker first</option>\n                                <option value={2}>Defense: stronger first</option>\n                                <option value={3}>Offense: weaker first</option>\n                                <option value={4}>Offense: stronger first</option>\n                                <option value={5}>Combined: weaker first</option>\n                                <option value={6}>Combined: stronger first</option>\n                            </select>\n                            <div>Targeting tactics for the monsters</div>\n                            <select className=\"dropdown\" value={this.state.monsterMethod} onChange={this.handleUpdateMonsterMethod}>\n                                <option value={0}>Random order</option>\n                                <option value={1}>Defense: weaker first</option>\n                                <option value={2}>Defense: stronger first</option>\n                                <option value={3}>Offense: weaker first</option>\n                                <option value={4}>Offense: stronger first</option>\n                                <option value={5}>Combined: weaker first</option>\n                                <option value={6}>Combined: stronger first</option>\n                            </select>\n                            <div>\n                                <div>Number of simulations</div>\n                                <input type=\"number\" value={this.state.attempts || ''} onChange={this.handleUpdateAttempts}></input>\n                            </div>\n                            <Simulation encounter={this.state}/>\n                        </div> \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
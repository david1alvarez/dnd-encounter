{"version":3,"sources":["Creature.js","Simulation.js","Calculator.js","serviceWorker.js","index.js"],"names":["Creature","props","handleUpdateStats","newHp","newAc","newBonus","newDamage","newInitiative","newCreature","hp","state","creature","ac","bonus","damage","initiative","setState","onUpdateStats","number","isPlayer","handleRemoveCreature","onRemoveCreature","handleCopyCreature","onCopyCreature","bind","className","this","onClick","type","placeholder","value","stats","onChange","event","target","React","Component","Simulation","simulateOutcome","outcomes","i","outcome","runEncounter","parseInt","encounter","monsterMethod","playerMethod","playersDowned","players","forEach","player","push","attempts","array","length","j","Math","floor","random","temp","method","shuffleArray","sort","a","b","rollDie","JSON","parse","stringify","createTargetingOrder","initiativeOrder","monsters","monster","index","rollInitiative","turnSlot","attackEnemies","enemies","enemyIndex","findIndex","enemy","damageDealt","rollDamage","sortingPlayers","newEncounter","sortCreatures","sides","dice","damageDone","split","damageDie","showResults","Array","apply","map","_","encounters","percentage","parseFloat","toFixed","key","Calculator","setTestData","newPlayers","newMonsters","handleUpdatePlayerMethod","handleUpdateMonsterMethod","handleUpdateAttempts","splice","isDevEnvironment","window","location","href","includes","addPlayer","addMonster","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.098db3c8.chunk.js","sourcesContent":["import React from 'react'\nimport './Creature.css'\n\nexport default class Creature extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {creature: {}}\n        this.handleUpdateStats = this.handleUpdateStats.bind(this);\n    }\n\n    handleUpdateStats = (newHp, newAc, newBonus, newDamage, newInitiative) => {\n        let newCreature = {\n            hp: newHp !== false ? newHp : this.state.creature.hp,\n            ac: newAc !== false ? newAc : this.state.creature.ac,\n            bonus: newBonus !== false ? newBonus : this.state.creature.bonus,\n            damage: newDamage !== false ? newDamage : this.state.creature.damage,\n            initiative: newInitiative !== false ? newInitiative : this.state.creature.initiative\n        }\n        this.setState({creature: newCreature})\n        this.props.onUpdateStats(newCreature, this.props.number, this.props.isPlayer)\n    }\n\n    handleRemoveCreature = () => {\n        this.props.onRemoveCreature(this.props.number, this.props.isPlayer)\n    }\n\n    handleCopyCreature = () => {\n        this.props.onCopyCreature(this.props.number, this.props.isPlayer)\n    }\n\n    render() {\n        return (\n            <div className=\"margin\">\n                <div className=\"spread-right-left\">\n                    <h4>{this.props.isPlayer ? 'Player' : 'Monster'} {this.props.number + 1}</h4>\n                    <button onClick={this.handleRemoveCreature}>delete</button>\n                    <button onClick={this.handleCopyCreature}>duplicate</button>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>HP:&nbsp; </div>\n                    <input \n                        type=\"number\"\n                        placeholder={18}\n                        value={this.props.stats?.hp}\n                        onChange={event => this.handleUpdateStats(event.target.value, false, false, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>AC:&nbsp; </div>\n                    <input \n                        type=\"number\" \n                        placeholder={16}\n                        value={this.props.stats?.ac}\n                        onChange={event => this.handleUpdateStats(false, event.target.value, false, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Attack Bonus:&nbsp; </div>\n                    <input \n                        type=\"number\" \n                        placeholder={5}\n                        value={this.props.stats?.bonus}\n                        onChange={event => this.handleUpdateStats(false, false, event.target.value, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Damage per hit:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"1d8+3 3d6\"}\n                        value={this.props.stats?.damage}\n                        onChange={event => this.handleUpdateStats(false, false, false, event.target.value, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Initiative bonus:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"2\"}\n                        value={this.props.stats?.initiative}\n                        onChange={event => this.handleUpdateStats(false, false, false, false, event.target.value)}\n                    ></input>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport './Simulation.css'\n\nexport default class Simulation extends React.Component {\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array\n    }\n\n    sortCreatures(method, array) {\n        if(method === 0) { // randomized\n            return this.shuffleArray(array);\n        } else if (method === 1) { // weakest first \n            return array.sort((a, b) => {return (b.ac * b.hp)-(a.ac * a.hp)});\n        } else if (method === 2) { // strongest first\n            return array.sort((a, b) => {return (a.ac * a.hp)-(b.ac * b.hp)});\n        }\n    }\n\n    rollInitiative(creature) {\n        return this.rollDie(20) + creature.initiative\n    }\n\n    runEncounter(monsterMethod, playerMethod) {\n        let encounter = JSON.parse(JSON.stringify(this.props.encounter));\n        encounter = this.createTargetingOrder(monsterMethod, encounter, true);\n        encounter = this.createTargetingOrder(playerMethod, encounter, false)\n        let initiativeOrder = []\n\n        encounter.monsters.forEach((monster, index) => {\n            let initiative = this.rollInitiative(monster);\n            initiativeOrder.push({initiative: initiative, index: index, isPlayer: false})\n        })\n        encounter.players.forEach((player, index) => {\n            let initiative = this.rollInitiative(player);\n            initiativeOrder.push({initiative: initiative, index: index, isPlayer: true})\n        })\n\n        initiativeOrder.sort((a, b) => {return (a.initiative - b.initiative)})\n\n        initiativeOrder.forEach(turnSlot => {\n            if (turnSlot.isPlayer) {\n                if(playerMethod === 0) {\n                    encounter = this.createTargetingOrder(playerMethod, encounter, false)\n                }\n                this.monsters = this.attackEnemies(encounter.players[turnSlot.index], encounter.monsters)\n            } else {\n                if(monsterMethod === 0) {\n                    encounter = this.createTargetingOrder(monsterMethod, encounter, true)\n                }\n                this.players = this.attackEnemies(encounter.monsters[turnSlot.index], encounter.players)\n            }\n        })\n        return encounter\n    }\n\n    attackEnemies(creature, enemies) {\n        if (creature.hp <= 0) {return enemies}\n        let enemyIndex = enemies.findIndex(enemy => enemy.hp > 0);\n        if(enemyIndex === -1) {return enemies}\n\n\n        let attackRoll = this.rollDie(20) + creature.bonus;\n        if(attackRoll >= enemies[enemyIndex].ac) {\n            let damageDealt = this.rollDamage(creature.damage);\n            enemies[enemyIndex].hp = enemies[enemyIndex].hp - damageDealt;\n        }\n        return enemies\n    }\n\n    createTargetingOrder(method, encounter, sortingPlayers) {\n        let newEncounter = JSON.parse(JSON.stringify(encounter))\n        if (sortingPlayers) {\n            newEncounter.players = this.sortCreatures(method, newEncounter.players)\n        } else {\n            newEncounter.monsters = this.sortCreatures(method, newEncounter.monsters)\n        }\n        return newEncounter\n    }\n\n    rollDie(sides) {\n        return Math.floor(Math.random() * Math.floor(sides))+1;\n    }\n\n    rollDamage(dice) {\n        let damageDone = 0;\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            for (let i = 0; i < dice[0]; i++) {\n                damageDone += this.rollDie(dice[1]);\n                if(dice.length === 3) {damageDone += dice[2];}\n            }\n        })\n        return damageDone\n    }\n\n    simulateOutcome = () => {\n        let outcomes = []\n        for (let i = 0; i < this.props.encounter.attempts; i++) {\n            let outcome = this.runEncounter(\n                            parseInt(this.props.encounter.monsterMethod),\n                            parseInt(this.props.encounter.playerMethod)\n                            // this.props.encounter.cancel\n                        )\n\n            outcome.playersDowned = 0;\n            outcome.players.forEach(player => {\n                if (player.hp <= 0) {\n                    outcome.playersDowned++\n                }\n            })\n\n            outcomes.push(outcome)\n        }\n        this.setState({outcomes: outcomes})\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.simulateOutcome}>Run simulation</button>\n                {this.showResults}\n                {this.state\n                    ? Array.apply(0, Array(this.props.encounter.players.length+1)).map((_, i) => {\n                        let encounters = 0;\n                        this.state.outcomes.forEach(outcome => {\n                            if (outcome.playersDowned === i) { encounters++; }\n                        })\n                        let percentage = (parseFloat(encounters / this.state.outcomes.length) * 100).toFixed(1)\n                        return <div key={i}>{i} players die in {encounters} encounters ({percentage}%)</div>\n                    })\n                    : <div></div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Creature from './Creature'\nimport Simulation from './Simulation'\nimport './Calculator.css'\n\nexport default class Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [{}],\n            monsters: [{}],\n            playerMethod: 0,\n            monsterMethod: 0,\n            attempts: 1,\n            isDevEnvironment: window.location.href.includes('localhost:3000')\n        }\n        this.addPlayer = this.addPlayer.bind(this)\n        this.addMonster = this.addMonster.bind(this)\n    }\n\n    addPlayer() {\n        let newPlayers = [...this.state.players, []]\n        this.setState({players: newPlayers})\n    }\n\n    addMonster() {\n        let newMonsters = [...this.state.monsters, []]\n        this.setState({monsters: newMonsters})\n    }\n\n    setTestData = () => {\n        let testPlayers = [\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 }\n        ]\n        let testEnemies = [\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 20, ac: 18, bonus: 6, damage: \"1d8+3\", initiative: 2 }\n        ]\n        this.setState({players: testPlayers, monsters: testEnemies})\n    }\n\n    handleUpdateStats = (creature, i, isPlayer) => {\n        if(isPlayer) {\n            let newPlayers = [...this.state.players];\n            newPlayers[i] = creature;\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = [...this.state.monsters];\n            newMonsters[i] = creature;\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleUpdatePlayerMethod = (event) => {\n        this.setState({playerMethod: event.target.value})\n    }\n    handleUpdateMonsterMethod = (event) => {\n        this.setState({monsterMethod: event.target.value})\n    }\n\n    handleUpdateAttempts = (event) => {\n        this.setState({attempts: event.target.value})\n    }\n\n    handleRemoveCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 1)\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 1)\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleCopyCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 0, newPlayers[i])\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 0, newMonsters[i])\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"dark-mode center\">\n                <div>\n                    <h1 className=\"center-text\">D&amp;D 5e Combat Simulator</h1>\n                    <div className=\"grid-container\">\n                        <div>\n                            <button onClick={this.addPlayer}>Add Player</button>\n                            {this.state.players.map((player, i) => {\n                                return (\n                                    <Creature \n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats} \n                                        isPlayer={true}\n                                        stats={{hp: player.hp, ac: player.ac, bonus: player.bonus, damage: player.damage, initiative: player.initiative}}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                        </div>\n                        <div>\n                            <button onClick={this.addMonster}>Add Monster</button>\n                            {this.state.monsters.map((monster, i) => {\n                                return (\n                                    <Creature\n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats}\n                                        isPlayer={false}\n                                        stats={{hp: monster.hp, ac: monster.ac, bonus: monster.bonus, damage: monster.damage, initiative: monster.initiative}}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                        </div>\n                        {this.state.isDevEnvironment ? <button onClick={this.setTestData}>Add Test Data</button> : ''}\n                    </div>\n                    <div>Targeting tactics for the players</div>\n                    <select className=\"dropdown\" value={this.state.playerMethod} onChange={this.handleUpdatePlayerMethod}>\n                        <option value={0}>Random order</option>\n                        <option value={1}>Weakest first</option>\n                        <option value={2}>Strongest first</option>\n                    </select>\n                    <div>Targeting tactics for the monsters</div>\n                    <select className=\"dropdown\" value={this.state.monsterMethod} onChange={this.handleUpdateMonsterMethod}>\n                        <option value={0}>Random order</option>\n                        <option value={1}>Weakest first</option>\n                        <option value={2}>Strongest first</option>\n                    </select>\n                    <div>\n                        <div>Number of simulations</div>\n                        <input type=\"number\" placeholder={1} onChange={this.handleUpdateAttempts}></input>\n                    </div>\n                    <Simulation encounter={this.state}/>\n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
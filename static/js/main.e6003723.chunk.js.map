{"version":3,"sources":["Creature.js","Simulation.js","Calculator.js","serviceWorker.js","index.js"],"names":["Creature","props","handleUpdateStats","newHp","newAc","newBonus","newDamage","newInitiative","newCreature","hp","castToInt","stats","ac","bonus","damage","initiative","onUpdateStats","number","isPlayer","handleRemoveCreature","onRemoveCreature","handleCopyCreature","onCopyCreature","bind","input","parseInt","className","this","onClick","type","placeholder","value","onChange","event","target","React","Component","Simulation","simulateOutcome","outcomes","i","survivors","runEncounter","playersAlive","forEach","creature","push","encounter","players","length","attempts","setState","array","j","Math","floor","random","temp","method","shuffleArray","sort","a","b","rollDie","JSON","parse","stringify","initiativeOrder","player","initiativeRoll","attackMethod","playerMethod","monsters","monster","monsterMethod","rollInitiative","findIndex","console","log","attackEnemies","enemyIndex","enemyIndices","enemies","index","sortCreatures","rollAttack","rollDamage","splice","sortingPlayers","newEncounter","sides","dice","damageDone","split","damageDie","showResults","state","Array","apply","map","_","encounters","outcome","percentage","parseFloat","toFixed","key","Calculator","setTestData","newPlayers","newMonsters","handleUpdatePlayerMethod","handleUpdateMonsterMethod","handleUpdateAttempts","isDevEnvironment","window","location","href","includes","addPlayer","addMonster","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e6003723.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Creature.css'\r\n\r\nexport default class Creature extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = {creature: {}}\r\n        this.handleUpdateStats = this.handleUpdateStats.bind(this);\r\n    }\r\n\r\n    castToInt(input) {\r\n        if (input === \"\") {\r\n            return input\r\n        } else {\r\n            return parseInt(input)\r\n        }\r\n    }\r\n\r\n    /*\r\n        state should be offloaded to props? props are set to parent's state, so having the child have an independent concept of the state is faulty.\r\n        Child should tell parent to update state\r\n    */\r\n\r\n\r\n    handleUpdateStats = (newHp, newAc, newBonus, newDamage, newInitiative) => {\r\n        let newCreature = {\r\n            hp: newHp !== false ? this.castToInt(newHp) : this.props.stats.hp,\r\n            ac: newAc !== false ? this.castToInt(newAc) : this.props.stats.ac,\r\n            bonus: newBonus !== false ? this.castToInt(newBonus) : this.props.stats.bonus,\r\n            damage: newDamage !== false ? newDamage : this.props.stats.damage,\r\n            initiative: newInitiative !== false ? this.castToInt(newInitiative) : this.props.stats.initiative\r\n        }\r\n        // this.setState({creature: newCreature}, () => {console.log(this.state)})\r\n        this.props.onUpdateStats(newCreature, this.props.number, this.props.isPlayer)\r\n    }\r\n\r\n    handleRemoveCreature = () => {\r\n        this.props.onRemoveCreature(this.props.number, this.props.isPlayer)\r\n    }\r\n\r\n    handleCopyCreature = () => {\r\n        this.props.onCopyCreature(this.props.number, this.props.isPlayer)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"margin\">\r\n                <div className=\"spread-right-left\">\r\n                    <h4>{this.props.isPlayer ? 'Player' : 'Monster'} {this.props.number + 1}</h4>\r\n                    <button onClick={this.handleRemoveCreature}>delete</button>\r\n                    <button onClick={this.handleCopyCreature}>duplicate</button>\r\n                </div>\r\n                <div className=\"spread-right-left\">\r\n                    <div>HP:&nbsp; </div>\r\n                    <input \r\n                        type=\"number\"\r\n                        placeholder={18}\r\n                        value={this.props.stats?.hp}\r\n                        onChange={event => this.handleUpdateStats(event.target.value, false, false, false, false)}\r\n                    ></input>\r\n                </div>\r\n                <div className=\"spread-right-left\">\r\n                    <div>AC:&nbsp; </div>\r\n                    <input \r\n                        type=\"number\" \r\n                        placeholder={16}\r\n                        value={this.props.stats?.ac}\r\n                        onChange={event => this.handleUpdateStats(false, event.target.value, false, false, false)}\r\n                    ></input>\r\n                </div>\r\n                <div className=\"spread-right-left\">\r\n                    <div>Attack Bonus:&nbsp; </div>\r\n                    <input \r\n                        type=\"number\" \r\n                        placeholder={5}\r\n                        value={this.props.stats?.bonus}\r\n                        onChange={event => this.handleUpdateStats(false, false, event.target.value, false, false)}\r\n                    ></input>\r\n                </div>\r\n                <div className=\"spread-right-left\">\r\n                    <div>Damage per hit:&nbsp; </div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder={\"1d8+3 3d6\"}\r\n                        value={this.props.stats?.damage}\r\n                        onChange={event => this.handleUpdateStats(false, false, false, event.target.value, false)}\r\n                    ></input>\r\n                </div>\r\n                <div className=\"spread-right-left\">\r\n                    <div>Initiative bonus:&nbsp; </div>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder={\"2\"}\r\n                        value={this.props.stats?.initiative}\r\n                        onChange={event => this.handleUpdateStats(false, false, false, false, event.target.value)}\r\n                    ></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Simulation.css'\r\n\r\nexport default class Simulation extends React.Component {\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    sortCreatures(method, array) {\r\n        if(method === 0) { // randomized\r\n            return this.shuffleArray(array);\r\n        } else if (method === 1) { // weakest first \r\n            return array.sort((a, b) => {return (b.ac * b.hp)-(a.ac * a.hp)});\r\n        } else if (method === 2) { // strongest first\r\n            return array.sort((a, b) => {return (a.ac * a.hp)-(b.ac * b.hp)});\r\n        }\r\n    }\r\n\r\n    rollInitiative(creature) {\r\n        return this.rollDie(20) + creature.initiative\r\n    }\r\n\r\n    runEncounter() {\r\n        let encounter = JSON.parse(JSON.stringify(this.props.encounter));\r\n\r\n        let initiativeOrder = []\r\n        encounter.players.forEach(player => {\r\n            initiativeOrder.push({...player, isPlayer: true, initiativeRoll: 0, attackMethod: this.props.encounter.playerMethod})\r\n        })\r\n        encounter.monsters.forEach(monster => {\r\n            initiativeOrder.push({...monster,isPlayer: false, initiativeRoll: 0, attackMethod: this.props.encounter.monsterMethod})\r\n        })\r\n\r\n        initiativeOrder.forEach(creature => {\r\n            creature.initiativeRoll = this.rollInitiative(creature)\r\n        })\r\n\r\n        initiativeOrder.sort((a, b) => {return (b.initiativeRoll - a.initiativeRoll)})\r\n\r\n        while (initiativeOrder.findIndex(creature => { return (creature.isPlayer && (creature.hp > 0)) }) !== -1\r\n            && initiativeOrder.findIndex(creature => { return (!creature.isPlayer && (creature.hp > 0)) }) !== -1\r\n        ) {\r\n            // operates under the assumption that the element of the array being edited is not the one currently being evaluated (dont make a creature attack itself)\r\n            initiativeOrder.forEach(creature => { \r\n                console.log(`it is this ${creature.isPlayer ? 'player\\'s' : 'monster\\s'} turn: `)\r\n                console.log(creature)\r\n                initiativeOrder = this.attackEnemies(creature, initiativeOrder)\r\n                // debugger;\r\n            })\r\n        }\r\n\r\n        return initiativeOrder\r\n    }\r\n\r\n    \r\n    attackEnemies(creature, initiativeOrder) {\r\n        // probable bug in the enemy identification logic\r\n        // other alternative: bug in the turn taking logic\r\n\r\n        \r\n        // determine who to attack\r\n        let enemyIndex = 0\r\n        if (creature.attackMethod === 0) { // random order attacks\r\n            let enemyIndices = []\r\n            for (let i=0; i < initiativeOrder.length; i++) {\r\n                if (initiativeOrder[i].isPlayer !== creature.isPlayer) {\r\n                    enemyIndices.push(i)\r\n                }\r\n                if (enemyIndices.length <= 0) {\r\n                    console.log('no enemies remaining')\r\n                    return initiativeOrder\r\n                }\r\n                enemyIndex = enemyIndices[Math.floor(Math.random() * enemyIndices.length)]\r\n            }\r\n        } else {\r\n            let enemies = []\r\n            for (let i=0; i < initiativeOrder.length; i++) {\r\n                if (initiativeOrder[i].isPlayer !== creature.isPlayer) {\r\n                    enemies.push({index: i, hp: initiativeOrder[i].hp, ac: initiativeOrder[i].ac})\r\n                }\r\n                if (enemies.length <= 0) {\r\n                    console.log('no enemies remaining')\r\n                    return initiativeOrder\r\n                }\r\n                enemies = this.sortCreatures(creature.attackMethod, enemies)\r\n            }\r\n            enemyIndex = enemies[0].index\r\n        }\r\n\r\n        // attack them\r\n        if(this.rollAttack(creature.bonus) >= initiativeOrder[enemyIndex].ac) {\r\n            initiativeOrder[enemyIndex].hp -= this.rollDamage(creature.damage)\r\n        }\r\n\r\n        // filter out killed creatures\r\n        if (initiativeOrder[enemyIndex].hp <= 0) {\r\n            initiativeOrder.splice(enemyIndex, 1)\r\n        }\r\n        return initiativeOrder\r\n    }\r\n\r\n    createTargetingOrder(method, encounter, sortingPlayers) {\r\n        let newEncounter = JSON.parse(JSON.stringify(encounter))\r\n        if (sortingPlayers) {\r\n            newEncounter.players = this.sortCreatures(method, newEncounter.players)\r\n        } else {\r\n            newEncounter.monsters = this.sortCreatures(method, newEncounter.monsters)\r\n        }\r\n        return newEncounter\r\n    }\r\n\r\n    rollDie(sides) {\r\n        return Math.floor(Math.random() * Math.floor(sides))+1;\r\n    }\r\n\r\n    rollDamage(dice) {\r\n        let damageDone = 0;\r\n        dice = dice.split(' ').forEach(damageDie => {\r\n            let dice = damageDie.split(/[+d]+/);\r\n            for (let i = 0; i < parseInt(dice[0]); i++) {\r\n                damageDone += parseInt(this.rollDie(dice[1]));\r\n                if(dice.length === 3) {damageDone += parseInt(dice[2]);}\r\n            }\r\n        })\r\n        return damageDone\r\n    }\r\n\r\n    rollAttack(bonus) {\r\n        return this.rollDie(20) + bonus\r\n    }\r\n\r\n    simulateOutcome = () => {\r\n        let outcomes = []\r\n        for (let i = 0; i < this.props.encounter.attempts; i++) {\r\n\r\n            let survivors = this.runEncounter()\r\n            let playersAlive = 0;\r\n            survivors.forEach(creature => {\r\n                if (creature.isPlayer && creature.hp > 0) {\r\n                    playersAlive++\r\n                }\r\n            })\r\n\r\n            outcomes.push(this.props.encounter.players.length - playersAlive)\r\n        }\r\n        this.setState({outcomes: outcomes})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <button onClick={this.simulateOutcome}>Run simulation</button>\r\n                {this.showResults}\r\n                {this.state\r\n                    ? Array.apply(0, Array(this.props.encounter.players.length+1)).map((_, i) => {\r\n                        let encounters = 0;\r\n                        this.state.outcomes.forEach(outcome => {\r\n                            if (outcome === i) { encounters++; }\r\n                        })\r\n                        let percentage = (parseFloat(encounters / this.state.outcomes.length) * 100).toFixed(1)\r\n                        return <div key={i}>{i} players die in {encounters} encounters ({percentage}%)</div>\r\n                    })\r\n                    : <div></div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Creature from './Creature'\r\nimport Simulation from './Simulation'\r\nimport './Calculator.css'\r\n\r\nexport default class Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            players: [{}],\r\n            monsters: [{}],\r\n            playerMethod: 0,\r\n            monsterMethod: 0,\r\n            attempts: 1,\r\n            isDevEnvironment: window.location.href.includes('localhost:3000')\r\n        }\r\n        this.addPlayer = this.addPlayer.bind(this)\r\n        this.addMonster = this.addMonster.bind(this)\r\n    }\r\n\r\n    addPlayer() {\r\n        let newPlayers = [...this.state.players, []]\r\n        this.setState({players: newPlayers})\r\n    }\r\n\r\n    addMonster() {\r\n        let newMonsters = [...this.state.monsters, []]\r\n        this.setState({monsters: newMonsters})\r\n    }\r\n\r\n    setTestData = () => {\r\n        let testPlayers = [\r\n            { hp: 20, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\r\n            { hp: 21, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\r\n            { hp: 22, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\r\n            { hp: 23, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 }\r\n        ]\r\n        let testEnemies = [\r\n            { hp: 20, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\r\n            { hp: 21, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\r\n            { hp: 22, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\r\n            { hp: 23, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 }\r\n        ]\r\n        this.setState({players: testPlayers, monsters: testEnemies})\r\n    }\r\n\r\n    handleUpdateStats = (creature, i, isPlayer) => {\r\n        if(isPlayer) {\r\n            let newPlayers = [...this.state.players].map(player => {\r\n                return {\r\n                    hp: parseInt(player.hp), \r\n                    ac: parseInt(player.ac), \r\n                    bonus: parseInt(player.bonus),\r\n                    damage: player.damage,\r\n                    initiative: parseInt(player.initiative)\r\n                }\r\n            });\r\n            \r\n            newPlayers[i] = creature;\r\n            this.setState({players: newPlayers})\r\n        } else {\r\n            let newMonsters = [...this.state.monsters].map(monster => {\r\n                return {\r\n                    hp: parseInt(monster.hp), \r\n                    ac: parseInt(monster.ac), \r\n                    bonus: parseInt(monster.bonus),\r\n                    damage: monster.damage,\r\n                    initiative: parseInt(monster.initiative)\r\n                }\r\n            });\r\n            newMonsters[i] = creature;\r\n            this.setState({monsters: newMonsters})\r\n        }\r\n    }\r\n\r\n    handleUpdatePlayerMethod = (event) => {\r\n        this.setState({playerMethod: event.target.value})\r\n    }\r\n    handleUpdateMonsterMethod = (event) => {\r\n        this.setState({monsterMethod: event.target.value})\r\n    }\r\n\r\n    handleUpdateAttempts = (event) => {\r\n        this.setState({attempts: event.target.value})\r\n    }\r\n\r\n    handleRemoveCreature = (i, isPlayer) => {\r\n        if (isPlayer) {\r\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\r\n            newPlayers.splice(i, 1)\r\n            this.setState({players: newPlayers})\r\n        } else {\r\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\r\n            newMonsters.splice(i, 1)\r\n            this.setState({monsters: newMonsters})\r\n        }\r\n    }\r\n\r\n    handleCopyCreature = (i, isPlayer) => {\r\n        if (isPlayer) {\r\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\r\n            newPlayers.splice(i, 0, newPlayers[i])\r\n            this.setState({players: newPlayers})\r\n        } else {\r\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\r\n            newMonsters.splice(i, 0, newMonsters[i])\r\n            this.setState({monsters: newMonsters})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"dark-mode center\">\r\n                <div>\r\n                    <h1 className=\"center-text\">D&amp;D 5e Combat Simulator</h1>\r\n                    <div className=\"grid-container\">\r\n                        <div>\r\n                            <button onClick={this.addPlayer}>Add Player</button>\r\n                            {this.state.players.map((player, i) => {\r\n                                return (\r\n                                    <Creature \r\n                                        key={i}\r\n                                        number={i}\r\n                                        onUpdateStats={this.handleUpdateStats} \r\n                                        isPlayer={true}\r\n                                        stats={{hp: player.hp, ac: player.ac, bonus: player.bonus, damage: player.damage, initiative: player.initiative}}\r\n                                        onRemoveCreature={this.handleRemoveCreature}\r\n                                        onCopyCreature={this.handleCopyCreature}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <div>\r\n                            <button onClick={this.addMonster}>Add Monster</button>\r\n                            {this.state.monsters.map((monster, i) => {\r\n                                return (\r\n                                    <Creature\r\n                                        key={i}\r\n                                        number={i}\r\n                                        onUpdateStats={this.handleUpdateStats}\r\n                                        isPlayer={false}\r\n                                        stats={{hp: monster.hp, ac: monster.ac, bonus: monster.bonus, damage: monster.damage, initiative: monster.initiative}}\r\n                                        onRemoveCreature={this.handleRemoveCreature}\r\n                                        onCopyCreature={this.handleCopyCreature}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        {this.state.isDevEnvironment ? <button onClick={this.setTestData}>Add Test Data</button> : ''}\r\n                    </div>\r\n                    <div>Targeting tactics for the players</div>\r\n                    <select className=\"dropdown\" value={this.state.playerMethod} onChange={this.handleUpdatePlayerMethod}>\r\n                        <option value={0}>Random order</option>\r\n                        <option value={1}>Weakest first</option>\r\n                        <option value={2}>Strongest first</option>\r\n                    </select>\r\n                    <div>Targeting tactics for the monsters</div>\r\n                    <select className=\"dropdown\" value={this.state.monsterMethod} onChange={this.handleUpdateMonsterMethod}>\r\n                        <option value={0}>Random order</option>\r\n                        <option value={1}>Weakest first</option>\r\n                        <option value={2}>Strongest first</option>\r\n                    </select>\r\n                    <div>\r\n                        <div>Number of simulations</div>\r\n                        <input type=\"number\" placeholder={1} onChange={this.handleUpdateAttempts}></input>\r\n                    </div>\r\n                    <Simulation encounter={this.state}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Calculator from './Calculator'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Calculator />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}
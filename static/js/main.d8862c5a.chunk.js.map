{"version":3,"sources":["Creature.js","Simulation.js","Calculator.js","serviceWorker.js","index.js"],"names":["Creature","props","handleUpdateStats","newHp","newAc","newBonus","newDamage","newInitiative","newCreature","hp","castToInt","stats","ac","bonus","damage","initiative","onUpdateStats","number","isPlayer","handleRemoveCreature","onRemoveCreature","handleCopyCreature","onCopyCreature","bind","input","parseInt","className","this","onClick","type","placeholder","value","onChange","event","target","React","Component","Simulation","simulateOutcome","outcomes","i","survivors","runEncounter","playersAlive","forEach","creature","push","encounter","players","length","attempts","setState","array","j","Math","floor","random","temp","method","shuffleArray","sort","a","b","calculateMaxDamage","console","error","rollDie","JSON","parse","stringify","initiativeOrder","player","initiativeRoll","attackMethod","playerMethod","monsters","monster","monsterMethod","rollInitiative","playerTargetingOrder","monsterTargetingOrder","attackingOrder","findIndex","attackEnemies","enemies","index","sortCreatures","enemy","find","item","rollAttack","rollDamage","sortingPlayers","newEncounter","sides","dice","maxDamage","split","damageDie","damageDone","showResults","state","Array","apply","map","_","encounters","outcome","percentage","parseFloat","toFixed","key","Calculator","setTestData","newPlayers","newMonsters","handleUpdatePlayerMethod","handleUpdateMonsterMethod","handleUpdateAttempts","splice","isDevEnvironment","window","location","href","includes","addPlayer","addMonster","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d8862c5a.chunk.js","sourcesContent":["import React from 'react'\nimport './Creature.css'\n\nexport default class Creature extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleUpdateStats = this.handleUpdateStats.bind(this);\n    }\n\n    castToInt(input) {\n        if (input === \"\") {\n            return input\n        } else {\n            return parseInt(input)\n        }\n    }\n\n    handleUpdateStats = (newHp, newAc, newBonus, newDamage, newInitiative) => {\n        let newCreature = {\n            hp: newHp !== false ? this.castToInt(newHp) : this.props.stats.hp,\n            ac: newAc !== false ? this.castToInt(newAc) : this.props.stats.ac,\n            bonus: newBonus !== false ? this.castToInt(newBonus) : this.props.stats.bonus,\n            damage: newDamage !== false ? newDamage : this.props.stats.damage,\n            initiative: newInitiative !== false ? this.castToInt(newInitiative) : this.props.stats.initiative\n        }\n        this.props.onUpdateStats(newCreature, this.props.number, this.props.isPlayer)\n    }\n\n    handleRemoveCreature = () => {\n        this.props.onRemoveCreature(this.props.number, this.props.isPlayer)\n    }\n\n    handleCopyCreature = () => {\n        this.props.onCopyCreature(this.props.number, this.props.isPlayer)\n    }\n\n    render() {\n        return (\n            <div className=\"margin\">\n                <div className=\"spread-right-left\">\n                    <h4>{this.props.isPlayer ? 'Player' : 'Monster'} {this.props.number + 1}</h4>\n                    <button onClick={this.handleRemoveCreature}>delete</button>\n                    <button onClick={this.handleCopyCreature}>duplicate</button>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>HP:&nbsp; </div>\n                    <input \n                        type=\"text\"\n                        placeholder={\"ex: 18\"}\n                        value={(typeof this.props.stats?.hp === \"number\") ? this.props.stats?.hp : ''}\n                        onChange={event => this.handleUpdateStats(event.target.value, false, false, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>AC:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 16\"}\n                        value={(typeof this.props.stats?.ac === \"number\") ? this.props.stats?.ac : ''}\n                        onChange={event => this.handleUpdateStats(false, event.target.value, false, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Attack Bonus:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 5\"}\n                        value={(typeof this.props.stats?.bonus === \"number\") ? this.props.stats?.bonus : ''}\n                        onChange={event => this.handleUpdateStats(false, false, event.target.value, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Damage per hit:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 1d8+3 3d6\"}\n                        value={(typeof this.props.stats?.damage === \"string\") ? this.props.stats?.damage : ''}\n                        onChange={event => this.handleUpdateStats(false, false, false, event.target.value, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Initiative bonus:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 2\"}\n                        value={(typeof this.props.stats?.initiative === \"number\") ? this.props.stats?.initiative : ''}\n                        onChange={event => this.handleUpdateStats(false, false, false, false, event.target.value)}\n                    ></input>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport './Simulation.css'\n\nexport default class Simulation extends React.Component {\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array\n    }\n\n    sortCreatures(method, array) {\n        switch(method) {\n            case 0: // random\n                return this.shuffleArray(array);\n            case 1: // weakest defense first\n                return array.sort((a, b) => {return (\n                    (a.ac * a.hp)-(b.ac * b.hp)\n                )});\n            case 2: // strongest defense first\n                return array.sort((a, b) => {return (\n                    (b.ac * b.hp)-(a.ac * a.hp)\n                )});\n            case 3: // weakest attack first\n                return array.sort((a, b) => {return (\n                    (a.bonus * this.calculateMaxDamage(a.damage))-(b.bonus * this.calculateMaxDamage(b.damage))\n                )})\n            case 4: // strongest attack first\n                return array.sort((a, b) => {return (\n                    (b.bonus * this.calculateMaxDamage(b.damage))-(a.bonus * this.calculateMaxDamage(a.damage))\n                )})\n            case 5: // weakest combined first\n                return array.sort((a, b) => {return (\n                    (a.ac * a.hp * a.bonus * this.calculateMaxDamage(a.damage))-(b.ac * b.hp * b.bonus * this.calculateMaxDamage(b.damage))\n                )})\n            case 6: // strongest combined first\n                return array.sort((a, b) => {return (\n                    (b.ac * b.hp * b.bonus * this.calculateMaxDamage(b.damage))-(a.ac * a.hp * a.bonus * this.calculateMaxDamage(a.damage))\n                )})\n            default:\n                console.error('no attack case match')\n        }\n    }\n\n    rollInitiative(creature) {\n        return this.rollDie(20) + creature.initiative\n    }\n\n    runEncounter() {\n        let encounter = JSON.parse(JSON.stringify(this.props.encounter));\n\n        let initiativeOrder = []\n        encounter.players.forEach(player => {\n            initiativeOrder.push({...player, isPlayer: true, initiativeRoll: 0, attackMethod: this.props.encounter.playerMethod})\n        })\n        encounter.monsters.forEach(monster => {\n            initiativeOrder.push({...monster,isPlayer: false, initiativeRoll: 0, attackMethod: this.props.encounter.monsterMethod})\n        })\n\n        initiativeOrder.forEach(creature => {\n            creature.initiativeRoll = this.rollInitiative(creature)\n        })\n\n        initiativeOrder.sort((a, b) => {return (b.initiativeRoll - a.initiativeRoll)})\n\n        // sort the player and monster targeting orders for non-random targeting cases\n        let playerTargetingOrder = [] // ordering of which players the monsters will attack first\n        let monsterTargetingOrder = [] // ordering of which monsters the players will attack first\n        if (this.props.encounter.monsterMethod !== 0) {\n            playerTargetingOrder = this.attackingOrder(this.props.encounter.monsterMethod, false, initiativeOrder)\n        }\n        if (this.props.encounter.playerMethod !== 0) {\n            monsterTargetingOrder = this.attackingOrder(this.props.encounter.playerMethod, true, initiativeOrder)\n        }\n\n        // cycle through the initiativeOrder array until one side dies\n        let i = 0\n        while (initiativeOrder.findIndex(creature => { return (creature.isPlayer && (creature.hp > 0)) }) !== -1\n            && initiativeOrder.findIndex(creature => { return (!creature.isPlayer && (creature.hp > 0)) }) !== -1\n        ) {\n            if (i >= initiativeOrder.length) {\n                i = 0\n            }\n            // if the targeting order is random, create the targetingOrders\n            if (initiativeOrder[i].isPlayer) {\n                if (this.props.encounter.playerMethod === 0) {\n                    monsterTargetingOrder = this.attackingOrder(this.props.encounter.playerMethod, initiativeOrder[i].isPlayer, initiativeOrder)\n                }\n                initiativeOrder = this.attackEnemies(initiativeOrder[i], monsterTargetingOrder, initiativeOrder)\n            } else if (!initiativeOrder[i].isPlayer) {\n                if (this.props.encounter.monsterMethod === 0) {\n                    playerTargetingOrder = this.attackingOrder(this.props.encounter.monsterMethod, initiativeOrder[i].isPlayer, initiativeOrder)\n                }\n                initiativeOrder = this.attackEnemies(initiativeOrder[i], playerTargetingOrder, initiativeOrder)\n            }\n            i++\n        }\n\n        return initiativeOrder\n    }\n\n    attackingOrder(method, isPlayer, initiativeOrder) {\n        let enemies = []\n        for (let i = 0; i < initiativeOrder.length; i++) {\n            if (initiativeOrder[i].isPlayer !== isPlayer) {\n                enemies.push({index: i, ...initiativeOrder[i]})\n            }\n        }\n        enemies = this.sortCreatures(method, enemies)\n        return enemies\n    }\n\n    attackEnemies(creature, enemies, initiativeOrder) {\n        // find first alive creature in that targeting order\n        let enemy = enemies.find(item => initiativeOrder[item.index].hp > 0)\n        if (!enemy) { // no living enemies remain\n            return initiativeOrder\n        }\n\n        if ((this.rollAttack(creature.bonus) >= initiativeOrder[enemy.index].ac)) {\n            initiativeOrder[enemy.index].hp -= this.rollDamage(creature.damage)\n        }\n        return initiativeOrder\n    }\n\n    createTargetingOrder(method, encounter, sortingPlayers) {\n        let newEncounter = JSON.parse(JSON.stringify(encounter))\n        if (sortingPlayers) {\n            newEncounter.players = this.sortCreatures(method, newEncounter.players)\n        } else {\n            newEncounter.monsters = this.sortCreatures(method, newEncounter.monsters)\n        }\n        return newEncounter\n    }\n\n    rollDie(sides) {\n        return Math.floor(Math.random() * Math.floor(sides))+1;\n    }\n\n    calculateMaxDamage(dice) {\n        let maxDamage = 0\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            maxDamage += (parseInt(dice[0]) * parseInt(dice[1]))\n            if (dice.length === 3) {\n                maxDamage += parseInt(dice[2])\n            }\n        })\n        return maxDamage\n    }\n\n    rollDamage(dice) {\n        let damageDone = 0;\n        dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            for (let i = 0; i < parseInt(dice[0]); i++) {\n                damageDone += parseInt(this.rollDie(dice[1]));\n            }\n            if(dice.length === 3) {damageDone += parseInt(dice[2]);}\n        })\n        return damageDone\n    }\n\n    rollAttack(bonus) {\n        return this.rollDie(20) + bonus\n    }\n\n    simulateOutcome = () => {\n        let outcomes = []\n        for (let i = 0; i < this.props.encounter.attempts; i++) {\n\n            let survivors = this.runEncounter()\n            let playersAlive = 0;\n            survivors.forEach(creature => {\n                if (creature.isPlayer && creature.hp > 0) {\n                    playersAlive++\n                }\n            })\n\n            outcomes.push(this.props.encounter.players.length - playersAlive)\n        }\n        this.setState({outcomes: outcomes})\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.simulateOutcome}>Run simulation</button>\n                {this.showResults}\n                {this.state\n                    ? Array.apply(0, Array(this.props.encounter.players.length+1)).map((_, i) => {\n                        let encounters = 0;\n                        this.state.outcomes.forEach(outcome => {\n                            if (outcome === i) { encounters++; }\n                        })\n                        let percentage = (parseFloat(encounters / this.state.outcomes.length) * 100).toFixed(1)\n                        return <div key={i}>{i} players die in {encounters} encounters ({percentage}%)</div>\n                    })\n                    : <div></div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Creature from './Creature'\nimport Simulation from './Simulation'\nimport './Calculator.css'\n\nexport default class Calculator extends React.Component {\n    // add in names and then displays of how frequencly each player dies\n    // use monsterData.json, filter in place. 1.6mb is big and may require a loading symbol, but would be worth it.\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [{}],\n            monsters: [{}],\n            playerMethod: 0,\n            monsterMethod: 0,\n            attempts: 1,\n            isDevEnvironment: window.location.href.includes('localhost:3000')\n        }\n        this.addPlayer = this.addPlayer.bind(this)\n        this.addMonster = this.addMonster.bind(this)\n    }\n\n    addPlayer() {\n        let newPlayers = [...this.state.players, []]\n        this.setState({players: newPlayers})\n    }\n\n    addMonster() {\n        let newMonsters = [...this.state.monsters, []]\n        this.setState({monsters: newMonsters})\n    }\n\n    setTestData = () => {\n        let testPlayers = [\n            { hp: 25, ac: 14, bonus: 7, damage: \"1d6+3\", initiative: 2 },\n            { hp: 50, ac: 16, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 75, ac: 18, bonus: 5, damage: \"2d108+3\", initiative: 2 },\n            { hp: 100, ac: 20, bonus: 4, damage: \"2d12+3\", initiative: 2 }\n        ]\n        let testEnemies = [\n            { hp: 25, ac: 14, bonus: 7, damage: \"1d6+3\", initiative: 2 },\n            { hp: 50, ac: 16, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 75, ac: 18, bonus: 5, damage: \"2d10+3\", initiative: 2 },\n            { hp: 100, ac: 20, bonus: 4, damage: \"2d12d6+3\", initiative: 2 }\n        ]\n        this.setState({players: testPlayers, monsters: testEnemies})\n    }\n\n    handleUpdateStats = (creature, i, isPlayer) => {\n        if(isPlayer) {\n            let newPlayers = [...this.state.players].map(player => {\n                return {\n                    hp: parseInt(player.hp), \n                    ac: parseInt(player.ac), \n                    bonus: parseInt(player.bonus),\n                    damage: player.damage,\n                    initiative: parseInt(player.initiative)\n                }\n            });\n            \n            newPlayers[i] = creature;\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = [...this.state.monsters].map(monster => {\n                return {\n                    hp: parseInt(monster.hp), \n                    ac: parseInt(monster.ac), \n                    bonus: parseInt(monster.bonus),\n                    damage: monster.damage,\n                    initiative: parseInt(monster.initiative)\n                }\n            });\n            newMonsters[i] = creature;\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleUpdatePlayerMethod = (event) => {\n        this.setState({playerMethod: parseInt(event.target.value)})\n    }\n    handleUpdateMonsterMethod = (event) => {\n        this.setState({monsterMethod: parseInt(event.target.value)})\n    }\n\n    handleUpdateAttempts = (event) => {\n        this.setState({attempts: parseInt(event.target.value)})\n    }\n\n    handleRemoveCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 1)\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 1)\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleCopyCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 0, newPlayers[i])\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 0, newMonsters[i])\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"dark-mode center\">\n                <div>\n                    <h1 className=\"center-text\">D&amp;D 5e Combat Simulator</h1>\n                    <div className=\"grid-container\">\n                        <div>\n                            <button onClick={this.addPlayer}>Add Player</button>\n                            {this.state.players.map((player, i) => {\n                                return (\n                                    <Creature \n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats} \n                                        isPlayer={true}\n                                        stats={{hp: player.hp, ac: player.ac, bonus: player.bonus, damage: player.damage, initiative: player.initiative}}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                        </div>\n                        <div>\n                            <button onClick={this.addMonster}>Add Monster</button>\n                            {this.state.monsters.map((monster, i) => {\n                                return (\n                                    <Creature\n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats}\n                                        isPlayer={false}\n                                        stats={{hp: monster.hp, ac: monster.ac, bonus: monster.bonus, damage: monster.damage, initiative: monster.initiative}}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                        </div>\n                        {this.state.isDevEnvironment ? <button onClick={this.setTestData}>Add Test Data</button> : ''}\n                    </div>\n                    <div>Targeting tactics for the players</div>\n                    <select className=\"dropdown\" value={this.state.playerMethod} onChange={this.handleUpdatePlayerMethod}>\n                        <option value={0}>Random order</option>\n                        <option value={1}>Defense: weaker first</option>\n                        <option value={2}>Defense: stronger first</option>\n                        <option value={3}>Offense: weaker first</option>\n                        <option value={4}>Offense: stronger first</option>\n                        <option value={5}>Combined: weaker first</option>\n                        <option value={6}>Combined: stronger first</option>\n                    </select>\n                    <div>Targeting tactics for the monsters</div>\n                    <select className=\"dropdown\" value={this.state.monsterMethod} onChange={this.handleUpdateMonsterMethod}>\n                        <option value={0}>Random order</option>\n                        <option value={1}>Defense: weaker first</option>\n                        <option value={2}>Defense: stronger first</option>\n                        <option value={3}>Offense: weaker first</option>\n                        <option value={4}>Offense: stronger first</option>\n                        <option value={5}>Combined: weaker first</option>\n                        <option value={6}>Combined: stronger first</option>\n                    </select>\n                    <div>\n                        <div>Number of simulations</div>\n                        <input type=\"number\" value={this.state.attempts || ''} onChange={this.handleUpdateAttempts}></input>\n                    </div>\n                    <Simulation encounter={this.state}/>\n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
{"version":3,"sources":["Creature.js","Simulation.js","Calculator.js","serviceWorker.js","index.js"],"names":["Creature","props","handleUpdateStats","newHp","newAc","newBonus","newDamage","newInitiative","newCreature","hp","castToInt","stats","ac","bonus","damage","initiative","onUpdateStats","number","isPlayer","handleRemoveCreature","onRemoveCreature","handleCopyCreature","onCopyCreature","bind","input","parseInt","className","this","onClick","type","placeholder","value","onChange","event","target","React","Component","Simulation","simulateOutcome","outcomes","i","survivors","runEncounter","playersAlive","forEach","creature","push","encounter","players","length","attempts","setState","array","j","Math","floor","random","temp","method","shuffleArray","sort","a","b","rollDie","JSON","parse","stringify","initiativeOrder","player","initiativeRoll","attackMethod","playerMethod","monsters","monster","monsterMethod","rollInitiative","findIndex","attackEnemies","enemyIndex","enemyIndices","console","log","enemies","index","sortCreatures","rollAttack","rollDamage","splice","sortingPlayers","newEncounter","sides","dice","damageDone","split","damageDie","showResults","state","Array","apply","map","_","encounters","outcome","percentage","parseFloat","toFixed","key","Calculator","setTestData","newPlayers","newMonsters","handleUpdatePlayerMethod","handleUpdateMonsterMethod","handleUpdateAttempts","isDevEnvironment","window","location","href","includes","addPlayer","addMonster","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6822aa20.chunk.js","sourcesContent":["import React from 'react'\nimport './Creature.css'\n\nexport default class Creature extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleUpdateStats = this.handleUpdateStats.bind(this);\n    }\n\n    castToInt(input) {\n        if (input === \"\") {\n            return input\n        } else {\n            return parseInt(input)\n        }\n    }\n\n    handleUpdateStats = (newHp, newAc, newBonus, newDamage, newInitiative) => {\n        let newCreature = {\n            hp: newHp !== false ? this.castToInt(newHp) : this.props.stats.hp,\n            ac: newAc !== false ? this.castToInt(newAc) : this.props.stats.ac,\n            bonus: newBonus !== false ? this.castToInt(newBonus) : this.props.stats.bonus,\n            damage: newDamage !== false ? newDamage : this.props.stats.damage,\n            initiative: newInitiative !== false ? this.castToInt(newInitiative) : this.props.stats.initiative\n        }\n        this.props.onUpdateStats(newCreature, this.props.number, this.props.isPlayer)\n    }\n\n    handleRemoveCreature = () => {\n        this.props.onRemoveCreature(this.props.number, this.props.isPlayer)\n    }\n\n    handleCopyCreature = () => {\n        this.props.onCopyCreature(this.props.number, this.props.isPlayer)\n    }\n\n    render() {\n        return (\n            <div className=\"margin\">\n                <div className=\"spread-right-left\">\n                    <h4>{this.props.isPlayer ? 'Player' : 'Monster'} {this.props.number + 1}</h4>\n                    <button onClick={this.handleRemoveCreature}>delete</button>\n                    <button onClick={this.handleCopyCreature}>duplicate</button>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>HP:&nbsp; </div>\n                    <input \n                        type=\"text\"\n                        placeholder={\"ex: 18\"}\n                        value={this.props.stats?.hp || ''} // default value of '' added to maintain controlled component status\n                        onChange={event => this.handleUpdateStats(event.target.value, false, false, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>AC:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 16\"}\n                        value={this.props.stats?.ac || ''}\n                        onChange={event => this.handleUpdateStats(false, event.target.value, false, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Attack Bonus:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 5\"}\n                        value={this.props.stats?.bonus || ''}\n                        onChange={event => this.handleUpdateStats(false, false, event.target.value, false, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Damage per hit:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 1d8+3 3d6\"}\n                        value={this.props.stats?.damage || ''}\n                        onChange={event => this.handleUpdateStats(false, false, false, event.target.value, false)}\n                    ></input>\n                </div>\n                <div className=\"spread-right-left\">\n                    <div>Initiative bonus:&nbsp; </div>\n                    <input \n                        type=\"text\" \n                        placeholder={\"ex: 2\"}\n                        value={this.props.stats?.initiative || ''}\n                        onChange={event => this.handleUpdateStats(false, false, false, false, event.target.value)}\n                    ></input>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport './Simulation.css'\n\nexport default class Simulation extends React.Component {\n    shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array\n    }\n\n    sortCreatures(method, array) {\n        if(method === 0) { // randomized\n            return this.shuffleArray(array);\n        } else if (method === 1) { // weakest first \n            return array.sort((a, b) => {return (b.ac * b.hp)-(a.ac * a.hp)});\n        } else if (method === 2) { // strongest first\n            return array.sort((a, b) => {return (a.ac * a.hp)-(b.ac * b.hp)});\n        }\n    }\n\n    rollInitiative(creature) {\n        return this.rollDie(20) + creature.initiative\n    }\n\n    runEncounter() {\n        let encounter = JSON.parse(JSON.stringify(this.props.encounter));\n\n        let initiativeOrder = []\n        encounter.players.forEach(player => {\n            initiativeOrder.push({...player, isPlayer: true, initiativeRoll: 0, attackMethod: this.props.encounter.playerMethod})\n        })\n        encounter.monsters.forEach(monster => {\n            initiativeOrder.push({...monster,isPlayer: false, initiativeRoll: 0, attackMethod: this.props.encounter.monsterMethod})\n        })\n\n        initiativeOrder.forEach(creature => {\n            creature.initiativeRoll = this.rollInitiative(creature)\n        })\n\n        initiativeOrder.sort((a, b) => {return (b.initiativeRoll - a.initiativeRoll)})\n\n        // cycle through the initiativeOrder array until one side dies\n        let i = 0\n        while (initiativeOrder.findIndex(creature => { return (creature.isPlayer && (creature.hp > 0)) }) !== -1\n            && initiativeOrder.findIndex(creature => { return (!creature.isPlayer && (creature.hp > 0)) }) !== -1\n        ) {\n            if (i >= initiativeOrder.length) {\n                i = 0\n            }\n            initiativeOrder = this.attackEnemies(initiativeOrder[i], initiativeOrder)\n            i++\n        }\n\n        return initiativeOrder\n    }\n\n    \n    attackEnemies(creature, initiativeOrder) {\n        // determine who to attack\n        let enemyIndex = 0\n        if (creature.attackMethod === 0) { // random order attacks\n            let enemyIndices = []\n            for (let i=0; i < initiativeOrder.length; i++) {\n                if (initiativeOrder[i].isPlayer !== creature.isPlayer) {\n                    enemyIndices.push(i)\n                }\n            }\n            if (enemyIndices.length <= 0) {\n                console.log('no enemies remaining')\n                return initiativeOrder\n            }\n            enemyIndex = enemyIndices[Math.floor(Math.random() * enemyIndices.length)]\n        } else {\n            let enemies = []\n            for (let i=0; i < initiativeOrder.length; i++) {\n                if (initiativeOrder[i].isPlayer !== creature.isPlayer) {\n                    enemies.push({index: i, hp: initiativeOrder[i].hp, ac: initiativeOrder[i].ac})\n                }\n            }\n            if (enemies.length <= 0) {\n                console.log('no enemies remaining')\n                return initiativeOrder\n            }\n            enemies = this.sortCreatures(creature.attackMethod, enemies)\n            enemyIndex = enemies[0].index // getting an \"enemies is undefined\" error here with weakest first targeting method\n        }\n\n        // attack them\n        if(this.rollAttack(creature.bonus) >= initiativeOrder[enemyIndex].ac) {\n            initiativeOrder[enemyIndex].hp -= this.rollDamage(creature.damage)\n        }\n\n        // filter out killed creatures\n        if (initiativeOrder[enemyIndex].hp <= 0) {\n            initiativeOrder.splice(enemyIndex, 1)\n        }\n        return initiativeOrder\n    }\n\n    createTargetingOrder(method, encounter, sortingPlayers) {\n        let newEncounter = JSON.parse(JSON.stringify(encounter))\n        if (sortingPlayers) {\n            newEncounter.players = this.sortCreatures(method, newEncounter.players)\n        } else {\n            newEncounter.monsters = this.sortCreatures(method, newEncounter.monsters)\n        }\n        return newEncounter\n    }\n\n    rollDie(sides) {\n        return Math.floor(Math.random() * Math.floor(sides))+1;\n    }\n\n    rollDamage(dice) {\n        let damageDone = 0;\n        dice = dice.split(' ').forEach(damageDie => {\n            let dice = damageDie.split(/[+d]+/);\n            for (let i = 0; i < parseInt(dice[0]); i++) {\n                damageDone += parseInt(this.rollDie(dice[1]));\n                if(dice.length === 3) {damageDone += parseInt(dice[2]);}\n            }\n        })\n        return damageDone\n    }\n\n    rollAttack(bonus) {\n        return this.rollDie(20) + bonus\n    }\n\n    simulateOutcome = () => {\n        let outcomes = []\n        for (let i = 0; i < this.props.encounter.attempts; i++) {\n\n            let survivors = this.runEncounter()\n            let playersAlive = 0;\n            survivors.forEach(creature => {\n                if (creature.isPlayer && creature.hp > 0) {\n                    playersAlive++\n                }\n            })\n\n            outcomes.push(this.props.encounter.players.length - playersAlive)\n        }\n        this.setState({outcomes: outcomes})\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.simulateOutcome}>Run simulation</button>\n                {this.showResults}\n                {this.state\n                    ? Array.apply(0, Array(this.props.encounter.players.length+1)).map((_, i) => {\n                        let encounters = 0;\n                        this.state.outcomes.forEach(outcome => {\n                            if (outcome === i) { encounters++; }\n                        })\n                        let percentage = (parseFloat(encounters / this.state.outcomes.length) * 100).toFixed(1)\n                        return <div key={i}>{i} players die in {encounters} encounters ({percentage}%)</div>\n                    })\n                    : <div></div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Creature from './Creature'\nimport Simulation from './Simulation'\nimport './Calculator.css'\n\nexport default class Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [{}],\n            monsters: [{}],\n            playerMethod: 0,\n            monsterMethod: 0,\n            attempts: 1,\n            isDevEnvironment: window.location.href.includes('localhost:3000')\n        }\n        this.addPlayer = this.addPlayer.bind(this)\n        this.addMonster = this.addMonster.bind(this)\n    }\n\n    addPlayer() {\n        let newPlayers = [...this.state.players, []]\n        this.setState({players: newPlayers})\n    }\n\n    addMonster() {\n        let newMonsters = [...this.state.monsters, []]\n        this.setState({monsters: newMonsters})\n    }\n\n    setTestData = () => {\n        let testPlayers = [\n            { hp: 20, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 21, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 22, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 23, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 }\n        ]\n        let testEnemies = [\n            { hp: 20, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 21, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 22, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 },\n            { hp: 23, ac: 1, bonus: 6, damage: \"1d8+3\", initiative: 2 }\n        ]\n        this.setState({players: testPlayers, monsters: testEnemies})\n    }\n\n    handleUpdateStats = (creature, i, isPlayer) => {\n        if(isPlayer) {\n            let newPlayers = [...this.state.players].map(player => {\n                return {\n                    hp: parseInt(player.hp), \n                    ac: parseInt(player.ac), \n                    bonus: parseInt(player.bonus),\n                    damage: player.damage,\n                    initiative: parseInt(player.initiative)\n                }\n            });\n            \n            newPlayers[i] = creature;\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = [...this.state.monsters].map(monster => {\n                return {\n                    hp: parseInt(monster.hp), \n                    ac: parseInt(monster.ac), \n                    bonus: parseInt(monster.bonus),\n                    damage: monster.damage,\n                    initiative: parseInt(monster.initiative)\n                }\n            });\n            newMonsters[i] = creature;\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleUpdatePlayerMethod = (event) => {\n        this.setState({playerMethod: event.target.value})\n    }\n    handleUpdateMonsterMethod = (event) => {\n        this.setState({monsterMethod: event.target.value})\n    }\n\n    handleUpdateAttempts = (event) => {\n        this.setState({attempts: event.target.value})\n    }\n\n    handleRemoveCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 1)\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 1)\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    handleCopyCreature = (i, isPlayer) => {\n        if (isPlayer) {\n            let newPlayers = JSON.parse(JSON.stringify(this.state.players))\n            newPlayers.splice(i, 0, newPlayers[i])\n            this.setState({players: newPlayers})\n        } else {\n            let newMonsters = JSON.parse(JSON.stringify(this.state.monsters))\n            newMonsters.splice(i, 0, newMonsters[i])\n            this.setState({monsters: newMonsters})\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"dark-mode center\">\n                <div>\n                    <h1 className=\"center-text\">D&amp;D 5e Combat Simulator</h1>\n                    <div className=\"grid-container\">\n                        <div>\n                            <button onClick={this.addPlayer}>Add Player</button>\n                            {this.state.players.map((player, i) => {\n                                return (\n                                    <Creature \n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats} \n                                        isPlayer={true}\n                                        stats={{hp: player.hp, ac: player.ac, bonus: player.bonus, damage: player.damage, initiative: player.initiative}}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                        </div>\n                        <div>\n                            <button onClick={this.addMonster}>Add Monster</button>\n                            {this.state.monsters.map((monster, i) => {\n                                return (\n                                    <Creature\n                                        key={i}\n                                        number={i}\n                                        onUpdateStats={this.handleUpdateStats}\n                                        isPlayer={false}\n                                        stats={{hp: monster.hp, ac: monster.ac, bonus: monster.bonus, damage: monster.damage, initiative: monster.initiative}}\n                                        onRemoveCreature={this.handleRemoveCreature}\n                                        onCopyCreature={this.handleCopyCreature}\n                                    />\n                                )\n                            })}\n                        </div>\n                        {this.state.isDevEnvironment ? <button onClick={this.setTestData}>Add Test Data</button> : ''}\n                    </div>\n                    <div>Targeting tactics for the players</div>\n                    <select className=\"dropdown\" value={this.state.playerMethod} onChange={this.handleUpdatePlayerMethod}>\n                        <option value={0}>Random order</option>\n                        <option value={1}>Weakest first</option>\n                        <option value={2}>Strongest first</option>\n                    </select>\n                    <div>Targeting tactics for the monsters</div>\n                    <select className=\"dropdown\" value={this.state.monsterMethod} onChange={this.handleUpdateMonsterMethod}>\n                        <option value={0}>Random order</option>\n                        <option value={1}>Weakest first</option>\n                        <option value={2}>Strongest first</option>\n                    </select>\n                    <div>\n                        <div>Number of simulations</div>\n                        <input type=\"number\" placeholder={1} onChange={this.handleUpdateAttempts}></input>\n                    </div>\n                    <Simulation encounter={this.state}/>\n                </div>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}